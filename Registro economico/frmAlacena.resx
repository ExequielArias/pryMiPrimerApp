<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAASUVORK5CYII=
</value>
  </data>
</root>